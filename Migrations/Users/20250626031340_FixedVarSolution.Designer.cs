// <auto-generated />
using System;
using MarkSubsystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarkSubsystem.Migrations.Users
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20250626031340_FixedVarSolution")]
    partial class FixedVarSolution
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarkSubsystem.Data.Grade", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<float>("Mark")
                        .HasColumnType("real")
                        .HasColumnName("mark");

                    b.HasKey("UserId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("Grades", (string)null);
                });

            modelBuilder.Entity("MarkSubsystem.Data.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("GroupId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("MarkSubsystem.Data.GroupSession", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.HasKey("SessionId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupSessions", (string)null);
                });

            modelBuilder.Entity("MarkSubsystem.Data.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SessionId"));

                    b.Property<DateTime>("DateFinish")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_finish");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_start");

                    b.Property<float>("Difficult")
                        .HasColumnType("real")
                        .HasColumnName("difficult");

                    b.Property<string>("SessionType")
                        .HasColumnType("text")
                        .HasColumnName("session_type");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval")
                        .HasColumnName("time");

                    b.HasKey("SessionId");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("MarkSubsystem.Data.SessionTest", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.HasKey("SessionId", "TestId");

                    b.ToTable("SessionTests", (string)null);
                });

            modelBuilder.Entity("MarkSubsystem.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon_path");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("UserId");

                    b.HasIndex("GroupId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MarkSubsystem.Models.SolutionsByProgram", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<int>("ProgramStep")
                        .HasColumnType("integer");

                    b.Property<int>("ProgramLineNumber")
                        .HasColumnType("integer");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<float>("StepDifficult")
                        .HasColumnType("real");

                    b.HasKey("SessionId", "TestId", "ProgramStep", "ProgramLineNumber", "OrderNumber");

                    b.ToTable("SolutionsByPrograms");
                });

            modelBuilder.Entity("MarkSubsystem.Models.SolutionsByUser", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserStep")
                        .HasColumnType("integer");

                    b.Property<int>("UserLineNumber")
                        .HasColumnType("integer");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<float>("StepDifficult")
                        .HasColumnType("real");

                    b.HasKey("SessionId", "UserId", "UserStep", "UserLineNumber", "OrderNumber", "TestId");

                    b.HasIndex("UserId");

                    b.ToTable("SolutionsByUsers");
                });

            modelBuilder.Entity("MarkSubsystem.Models.UserTestAbility", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<float>("Ability")
                        .HasColumnType("real");

                    b.HasKey("UserId", "TestId");

                    b.ToTable("UserTestAbilities");
                });

            modelBuilder.Entity("MarkSubsystem.Models.VariablesSolutionsByProgram", b =>
                {
                    b.Property<int>("ProgramStep")
                        .HasColumnType("integer");

                    b.Property<int>("ProgramLineNumber")
                        .HasColumnType("integer");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("VarName")
                        .HasColumnType("text");

                    b.Property<string>("VarValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProgramStep", "ProgramLineNumber", "OrderNumber", "TestId", "VarName");

                    b.ToTable("VariablesSolutionsByPrograms");
                });

            modelBuilder.Entity("MarkSubsystem.Models.VariablesSolutionsByUsers", b =>
                {
                    b.Property<int>("UserStep")
                        .HasColumnType("integer");

                    b.Property<int>("UserLineNumber")
                        .HasColumnType("integer");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("VarName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VarValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserStep", "UserLineNumber", "OrderNumber", "TestId", "VarName");

                    b.ToTable("VariablesSolutionsByUsers");
                });

            modelBuilder.Entity("MarkSubsystem.Data.Grade", b =>
                {
                    b.HasOne("MarkSubsystem.Data.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarkSubsystem.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkSubsystem.Data.GroupSession", b =>
                {
                    b.HasOne("MarkSubsystem.Data.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarkSubsystem.Data.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkSubsystem.Data.SessionTest", b =>
                {
                    b.HasOne("MarkSubsystem.Data.Session", null)
                        .WithMany("SessionTests")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkSubsystem.Data.User", b =>
                {
                    b.HasOne("MarkSubsystem.Data.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkSubsystem.Models.SolutionsByProgram", b =>
                {
                    b.HasOne("MarkSubsystem.Data.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("MarkSubsystem.Models.SolutionsByUser", b =>
                {
                    b.HasOne("MarkSubsystem.Data.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarkSubsystem.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarkSubsystem.Data.Session", b =>
                {
                    b.Navigation("SessionTests");
                });
#pragma warning restore 612, 618
        }
    }
}
